import com.sun.net.httpserver.Headers
import org.eclipse.egit.github.core.*
import org.eclipse.egit.github.core.client.*
import org.eclipse.egit.github.core.service.*
import groovyx.net.http.RESTClient
import groovyx.net.http.Method
import groovyx.net.http.ContentType
import groovyx.net.http.ParserRegistry

import java.io.File
import java.io.IOException

import org.eclipse.jgit.api.*
import org.eclipse.jgit.api.errors.*
import org.eclipse.jgit.api.CreateBranchCommand.SetupUpstreamMode
import org.eclipse.jgit.internal.storage.file.FileRepository
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
		classpath 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5'
		classpath 'org.eclipse.jgit:org.eclipse.jgit:3.5.1.201410131835-r'
	}
}

GitHubClient ghclient = null

ext.ghClient = {
	
	if (ghclient == null) {
		ghclient = new GitHubClient();
		ghclient.setOAuth2Token("7a81945a129caeb9278316f56ed0fb30c56fc12a");
	}

}

ext.ghRepos = {
	//ghClient();  // Make sure we are logged in first
	
	RepositoryService service = new RepositoryService();
	for (Repository repo : service.getRepositories("robomon1"))
		println "${repo.getName()} Watchers: ${repo.getWatchers()}"
	
}

ext.ghPullRequests = {
	ghClient();  // Make sure we are logged in first
	
	RepositoryService service = new RepositoryService();
	PullRequestService prService = new PullRequestService();
	
	for (Repository repo : service.getRepositories("robomon1")) {
		println "Getting pull requests for: ${repo.getName()}"
		for (PullRequest pr : prService.getPullRequests((IRepositoryIdProvider) repo, "open") ) {
			println "PullRequest: ${pr.getNumber()} - ${pr.getBody()}"
		}
	}
	
}

ext.jgitRepoCreate = { localPath ->
	Repository newRepo = new FileRepository(localPath + "/.git")
	newRepo.create()
}

ext.jgitRepoClone = { remotePath, localPath, username, password, checkout=true ->
	def jrepoPath = new File(localPath)
	Git repo
	if (!jrepoPath.exists()) { 
		repo = Git.cloneRepository()
			.setURI(remotePath)
			.setDirectory(new File(localPath))
			.setNoCheckout(checkout)
			.setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, password))
			.call()
	} else {
		// Load existing repo
	        def localRepo = new FileRepository(localPath + "/.git")
	        repo = new Git(localRepo)
	}

	return repo
}

ext.jgitCheckout = { Git repo, branch='master' ->
	//repo.checkout().setName(branch).call()

	repo.checkout()
		.setCreateBranch(true)
		.setName(branch)
                .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
                .setStartPoint("origin/${branch}")
		.call()

	return repo
}
	
