apply from: 'scripts/core.gradle'
apply from: 'scripts/test.gradle'
apply from: 'scripts/github.gradle'
apply from: 'scripts/puppet.gradle'

import java.io.File
import java.io.IOException

import org.eclipse.jgit.api.*
import org.eclipse.jgit.api.errors.*
import org.eclipse.jgit.api.CreateBranchCommand.SetupUpstreamMode
import org.eclipse.jgit.internal.storage.file.FileRepository
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider

repositories {
  mavenCentral()
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5'
    classpath 'org.eclipse.jgit:org.eclipse.jgit:3.5.1.201410131835-r'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

task bootstrap << {
	def env = getOption('env', 'dev') // Environment such as dev, qa, prd
	def server = getOption('server') // Server name
	def remoteRepo = getOption('remoteRepo') // Remote Git Repository
	def localRepo = getOption('localRepo', '/opt/localrepo') // Local Repository path
	def puppetPath = getOption('puppetPath', 'puppet') // Path inside repo where puppet files are
	def checkout = getOption('checkout', 'master') // Branch, Tag, Commit
	def username = getOption('username') // Git username
	def password = getOption('password') // Git password

  println "env = ${env}"
  println "server = ${server}"
  println "remoteRepo = ${remoteRepo}"
  println "localRepo = ${localRepo}"
  println "checkout = ${checkout}"
  println "username = ${username}"
  //println "password = ${password}"
	
	// git clone --depth=1 --branch=vrefactor2 git@github.com:robomon1/RaptureDevOps.git repotest
	exec {
		executable "git"
		args "clone", "--depth=1", "--branch=${checkout}", "${remoteRepo}", "${localRepo}"
	}
	//def repo = jgitRepoClone(remoteRepo, "/opt/repoclone", username, password)
	//repo = jgitCheckout(repo, checkout)
}
	
task papply << {
	def env = getOption('env', 'dev') // Environment such as dev, qa, prd
	def server = getOption('server') // Server name

  def configs1 = "/opt/repoclone/puppet/${env}/${server}/config-server.gradle"
  def configs2 = "/opt/repoclone/puppet/${env}/${server}/config-env.gradle"
  def mcfg = mergeConfigs(configs1, configs2)
  println "mcfg = ${mcfg}"
  def environment = mcfg['environment']
  println "${environment.hiera_yaml}"
  println "${environment.modules_path}"
  def servercfg = mcfg['server']
  println "${servercfg.manifest}"

	//puppet apply --modulepath=../../modules --hiera_config=../../hiera.yaml --environment=dev ../../manifests/site.pp
	
	setFacters(servercfg.factors.flatten())
}
